// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                   Int     @id @default(autoincrement())
  first_name           String
  last_name            String
  email                String  @unique
  phone_number         String
  tg_link              String
  is_active            Boolean @default(false)
  is_creator           Boolean @default(true)
  activation_link      String  @unique
  hashed_password      String
  hashed_refresh_token String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin")
}

model User {
  id                   Int     @id @default(autoincrement())
  first_name           String
  last_name            String
  email                String  @unique
  phone_number         String
  role                 String
  tg_link              String
  is_active            Boolean @default(false)
  activation_link      String  @unique
  hashed_password      String
  hashed_refresh_token String?

  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  Invesment             Invesment[]
  Project               Project[]
  Bids                  Bids[]
  investorContracts     Contract[]    @relation("InvestorRelation")
  entrepreneurContracts Contract[]    @relation("EntrepreneurRelation")
  reseiverTransaction   Transaction[] @relation("ReceiverRelation")
  senderTransaction     Transaction[] @relation("SenderRelation")

  @@map("user")
}

model ProjectType {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Project     Project[]
  Invesment   Invesment[]

  @@map("project_type")
}

model ProfitType {
  id          Int    @id @default(autoincrement())
  neme        String
  description String

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Contract  Contract[]

  @@map("profit_type")
}

model Invesment {
  id            Int         @id @default(autoincrement())
  investorId    Int
  amount        Float
  investor      User        @relation(fields: [investorId], references: [id])
  projectTypeId Int
  projectType   ProjectType @relation(fields: [projectTypeId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("invesment")
}

model PaymentMethod {
  id          Int           @id @default(autoincrement())
  name        String
  Transaction Transaction[]

  @@map("payment_method")
}

model Project {
  id                   Int         @id @default(autoincrement())
  name                 String
  description          String
  entreprenuerId       Int
  entreprenuer         User        @relation(fields: [entreprenuerId], references: [id])
  project_typeId       Int
  project_type         ProjectType @relation(fields: [project_typeId], references: [id])
  budged               Float
  project_plan         String
  logo                 String
  project_presentation String
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  Bids                 Bids[]
  Contract             Contract[]

  @@map("project")
}

model Bids {
  id          Int        @id @default(autoincrement())
  amount      Float
  investorId  Int
  investor    User       @relation(fields: [investorId], references: [id])
  description String
  projectId   Int
  project     Project    @relation(fields: [projectId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Contract    Contract[]

  @@map("bids")
}

model Contract {
  id                   Int                @id @default(autoincrement())
  investorId           Int
  entrepreneurId       Int
  projectId            Int
  bidId                Int
  amount               Float
  status               String
  startDate            DateTime
  endDate              DateTime
  profitTypeId         Int
  profitValue          Float
  dividend_period      String?
  ownership_percentage Float?
  condation_file       String
  investor             User               @relation(name: "InvestorRelation", fields: [investorId], references: [id])
  entrepreneur         User               @relation(name: "EntrepreneurRelation", fields: [entrepreneurId], references: [id])
  project              Project            @relation(fields: [projectId], references: [id])
  bid                  Bids               @relation(fields: [bidId], references: [id])
  profitType           ProfitType         @relation(fields: [profitTypeId], references: [id])
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  contractCondition    ContractCondition?
  Payment              Payment[]
  Transaction          Transaction[]

  @@map("contract")
}

model ContractCondition {
  id                Int      @id @default(autoincrement())
  contractId        Int      @unique
  terminationFee    String
  disputeResolution String
  paymentTerms      String
  penaltyTerms      String
  contract          Contract @relation(fields: [contractId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("contract_condition")
}

model Payment {
  id         Int      @id @default(autoincrement())
  amount     Float
  contractId Int
  status     String
  contaract  Contract @relation(fields: [contractId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("payment")
}

model Transaction {
  id              Int           @id @default(autoincrement())
  contractId      Int
  contarct        Contract      @relation(fields: [contractId], references: [id])
  receiverId      Int
  senderId        Int
  receiver        User          @relation(name: "ReceiverRelation", fields: [receiverId], references: [id])
  sender          User          @relation(name: "SenderRelation", fields: [senderId], references: [id])
  amount          Float
  type            String
  status          String
  paymentMethodId Int
  paymnetMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("transaction")
}
